// source: api-grpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.proto.PaymentResponse', null, global);
goog.exportSymbol('proto.proto.Ticket', null, global);
goog.exportSymbol('proto.proto.TicketRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PaymentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PaymentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PaymentResponse.displayName = 'proto.proto.PaymentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TicketRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TicketRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.TicketRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TicketRequest.displayName = 'proto.proto.TicketRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Ticket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Ticket.repeatedFields_, null);
};
goog.inherits(proto.proto.Ticket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Ticket.displayName = 'proto.proto.Ticket';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PaymentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PaymentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PaymentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PaymentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PaymentResponse}
 */
proto.proto.PaymentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PaymentResponse;
  return proto.proto.PaymentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PaymentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PaymentResponse}
 */
proto.proto.PaymentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PaymentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PaymentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PaymentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PaymentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.proto.PaymentResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PaymentResponse} returns this
 */
proto.proto.PaymentResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TicketRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TicketRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TicketRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TicketRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TicketRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketList: jspb.Message.toObjectList(msg.getTicketList(),
    proto.proto.Ticket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TicketRequest}
 */
proto.proto.TicketRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TicketRequest;
  return proto.proto.TicketRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TicketRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TicketRequest}
 */
proto.proto.TicketRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Ticket;
      reader.readMessage(value,proto.proto.Ticket.deserializeBinaryFromReader);
      msg.addTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TicketRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TicketRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TicketRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TicketRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Ticket.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ticket ticket = 1;
 * @return {!Array<!proto.proto.Ticket>}
 */
proto.proto.TicketRequest.prototype.getTicketList = function() {
  return /** @type{!Array<!proto.proto.Ticket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Ticket, 1));
};


/**
 * @param {!Array<!proto.proto.Ticket>} value
 * @return {!proto.proto.TicketRequest} returns this
*/
proto.proto.TicketRequest.prototype.setTicketList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Ticket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Ticket}
 */
proto.proto.TicketRequest.prototype.addTicket = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Ticket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.TicketRequest} returns this
 */
proto.proto.TicketRequest.prototype.clearTicketList = function() {
  return this.setTicketList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Ticket.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Ticket.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Ticket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Ticket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Ticket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticketid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ticketname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticketquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticketseatList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    ticketprice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    checkin: jspb.Message.getFieldWithDefault(msg, 6, ""),
    checkout: jspb.Message.getFieldWithDefault(msg, 7, ""),
    clientname: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Ticket}
 */
proto.proto.Ticket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Ticket;
  return proto.proto.Ticket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Ticket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Ticket}
 */
proto.proto.Ticket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicketquantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTicketseat(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicketprice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheckout(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Ticket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Ticket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Ticket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Ticket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicketid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTicketname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTicketquantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTicketseatList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTicketprice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCheckin();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCheckout();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getClientname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string ticketId = 1;
 * @return {string}
 */
proto.proto.Ticket.prototype.getTicketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setTicketid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ticketName = 2;
 * @return {string}
 */
proto.proto.Ticket.prototype.getTicketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setTicketname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 ticketQuantity = 3;
 * @return {number}
 */
proto.proto.Ticket.prototype.getTicketquantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setTicketquantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string ticketSeat = 4;
 * @return {!Array<string>}
 */
proto.proto.Ticket.prototype.getTicketseatList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setTicketseatList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.addTicketseat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.clearTicketseatList = function() {
  return this.setTicketseatList([]);
};


/**
 * optional string ticketPrice = 5;
 * @return {string}
 */
proto.proto.Ticket.prototype.getTicketprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setTicketprice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string checkIn = 6;
 * @return {string}
 */
proto.proto.Ticket.prototype.getCheckin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setCheckin = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string checkOut = 7;
 * @return {string}
 */
proto.proto.Ticket.prototype.getCheckout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setCheckout = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string clientName = 8;
 * @return {string}
 */
proto.proto.Ticket.prototype.getClientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Ticket} returns this
 */
proto.proto.Ticket.prototype.setClientname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto.proto);
